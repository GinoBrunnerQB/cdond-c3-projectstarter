version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    #parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    #parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: cd frontend && npm i && npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: cd backend && npm i && npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-backend:
    docker:
       - image: circleci/node:13.8.0
    steps:
       - checkout
       - restore_cache:
           keys: [backend-build]
       - run:
           name: Install npm dependencies
           command: cd backend && npm install
       - run:
           name: Run back-end tests
           command: cd backend && npm run test
       - save_cache:
           paths: [ backend/node_modules ]
           key: backend-build
                
  test-frontend:
    docker:
       - image: circleci/node:13.8.0
    steps:
       - checkout
       - restore_cache:
           keys: [frontend-build]
       - run:
           name: Install npm dependencies
           command: cd frontend && npm install
       - run:
           name: Run front-end tests
           command: cd frontend && npm run test
       - save_cache:
           paths: [ frontend/node_modules ]
           key: frontend-build
            
  scan-frontend:
     docker:
       - image: circleci/node:13.8.0
     steps:
       - checkout
       - restore_cache:
           keys: [frontend-build]
       - run:
           name: Install npm dependencies
           command: cd frontend && npm install
       - run:
           name: Run vulnerability check
           command: cd frontend && npm audit fix --audit-level=critical -- force

  scan-backend:
     docker:
       - image: circleci/node:13.8.0
     steps:
       - checkout
       - restore_cache:
           keys: [backend-build]
       - run:
           name: Install npm dependencies
           command: cd backend && npm install
       - run:
           name: Run vulnerability check
           command: cd backend && npm audit fix --audit-level=critical -- force

  deploy-infrastructure:
     docker:
       - image: amazon/aws-cli
     steps:
       - checkout
       - run:
           name: Install tar utility
           command: |
               yum install -y tar gzip
       - run:
           name: Ensure back-end infrastructure exists
           command: |
               aws cloudformation deploy \
               --template-file .circleci/files/backend.yml \
               --tags project=backend \
               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
       - run:
           name: Ensure front-end infrastructure exist
           command: |
               aws cloudformation deploy \
               --template-file .circleci/files/frontend.yml \
               --tags project=frontend \
               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
       - run:
           name: Add back-end ip to ansible inventory
           command: |
             aws ec2 describe-instances \
                 --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                 --query 'Reservations[*].Instances[*].{url:PublicIpAddress}' \
                 --output text >> .circleci/ansible/inventory.txt
       - persist_to_workspace:
           root: .
           paths:
             - .circleci/ansible/inventory.txt
       # Here's where you will add some code to rollback on failure

  configure-infrastructure:
     docker:
       - image: python:3.7-alpine3.11
     steps:
       - checkout
       - add_ssh_keys:
           fingerprints:
             - "9d:40:b8:cc:27:80:fa:24:1f:ae:e6:e1:f6:59:8d:3c"
       - attach_workspace:
          at: .
       - run:
           name: Install dependencies
           command: |
             apk add --update ansible && apk add --update openssh
       - run:
           name: Update known hosts file
           command: |
              cat .circleci/ansible/inventory.txt | egrep "^[0-9]" > filtered.txt &&
              ssh-keyscan -T 10 -H -f filtered.txt >> ~/.ssh/known_hosts
       - run:
           name: Configure server
           command: |
             # Your code here
             ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt
       # Here's where you will add some code to rollback on failure

  run-migrations:
     docker:
       - image: circleci/node:13.8.0
     steps:
       - checkout
       - restore_cache:
           keys: [backend-build]
       - run:
           name: Install npm dependencies
           command: |
              cd backend
              npm install
       - run:
           name: Run migrations
           no_output_timeout: 10m
           command: |
             cd backend
             npm run migrations | tee ~/project/backend/migration_log.txt
       - run:
           name: Send migration results to kvdb
           command: |
             if grep -q "success"  ~/project/backend/migration_log.txt
             then
                curl -k https://kvdb.io/AgDSCaSFfxFuHcGeNmMMTx/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
             else
                curl -k https://kvdb.io/AgDSCaSFfxFuHcGeNmMMTx/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
             fi
      # Here's where you will add some code to rollback on failure


  deploy-frontend:
     docker:
       - image: amazon/aws-cli
     steps:
       - checkout
       - run:
           name: Install dependencies
           command: |
               curl --silent --location https://rpm.nodesource.com/setup_14.x | bash -
               yum install -y tar gzip nodejs
       - attach_workspace:
           at: .
       - run:
           name: Get backend url
           command: |
             BACKEND_IP=$(aws ec2 describe-instances \
                              --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                              --query 'Reservations[*].Instances[*].{url:PublicIpAddress}' \
                              --output text) \
             export API_URL="http://${BACKEND_IP}:3030"
             echo "${API_URL}"
       - run:
           name: Deploy frontend objects
           command: |
             cd frontend
             npm i
             npm run build
             tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
             aws s3 sync dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
       # Here's where you will add some code to rollback on failure
                    
  deploy-backend:
     docker:
       - image: python:3.7-alpine3.11
     steps:
       - checkout
       - add_ssh_keys:
           fingerprints:
             - "9d:40:b8:cc:27:80:fa:24:1f:ae:e6:e1:f6:59:8d:3c"
       - attach_workspace:
          at: .
       - run:
           name: Install dependencies
           command: |
             apk add --update ansible openssh npm tar gzip nodejs
             pip install awscli
       - run:
           name: Update known hosts file
           command: |
              cat .circleci/ansible/inventory.txt | egrep "^[0-9]" > filtered.txt &&
              ssh-keyscan -T 10 -H -f filtered.txt >> ~/.ssh/known_hosts
       - run:
           name: Deploy backend
           command: |
             ansible-playbook .circleci/ansible/deploy-backend.yml -i .circleci/ansible/inventory.txt
       # Here's where you will add some code to rollback on failure

  smoke-test:
     docker:
       - image: python:3.7-alpine3.11
     steps:
       # Checkout code from git
       - checkout
       - run:
           name: Install dependencies
           command: |
             apk add --update curl nodejs npm
             pip install awscli
       - run:
           name: Get backend url
           command: |
             export BACKEND_IP=$(aws ec2 describe-instances \
                              --filters Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                              --query 'Reservations[*].Instances[*].{url:PublicIpAddress}' \
                              --output text)
             echo "${BACKEND_IP}"
       - run:
           name: Backend smoke test.
           command: |
             curl "http://${BACKEND_IP}:3030/api/status"
       - run:
           name: Frontend smoke test.
           command: |
             URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.eu-central-1.amazonaws.com"
             if curl -s ${URL} | grep "Welcome"
             then
                return 1
             else
                return 0
             fi

       # Here's where you will add some code to rollback on failure

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
      # Docker image here
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
           requires: [build-frontend]
      - test-backend:
           requires: [build-backend]
      - scan-backend:
           requires: [build-backend]
      - scan-frontend:
           requires: [build-frontend]
      - deploy-infrastructure:
           requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#           filters:
#             branches:
#               only: [test-feature-branch]
      - configure-infrastructure:
           requires: [deploy-infrastructure]
      - run-migrations:
           requires: [configure-infrastructure]
      - deploy-frontend:
           requires: [run-migrations]
      - deploy-backend:
           requires: [run-migrations]
      - smoke-test:
           requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]